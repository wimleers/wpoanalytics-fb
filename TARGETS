import os

cpp_binary (
  name = "patternminer",
  srcs = [
    "main.cpp",
    # CLI
    "CLI/CLI.cpp",
    # Analytics
    "Analytics/Item.cpp",
    "Analytics/FPTree.cpp",
    "Analytics/FPGrowth.cpp",
    "Analytics/TTWDefinition.cpp",
    "Analytics/TiltedTimeWindow.cpp",
    "Analytics/PatternTree.cpp",
    "Analytics/FPStream.cpp",
    "Analytics/RuleMiner.cpp",
    "Analytics/Constraints.cpp",
    "Analytics/Analyst.cpp",
    # Parser
    "Parser/JSONLogParser.cpp",
    # Parser subclass: TailerSwiftParser
    "TailerSwiftParser/Parser.cpp",
    # Config
    "Config/typedefs.cpp",
    "Config/Config.cpp",
    # Shared (Qxt stuff)
    "shared/qxtglobal.cpp",
    "shared/qxtjson.cpp",
    "shared/qxtcommandoptions.cpp",
    # common
    "common/common.cpp",
    # Generated by the 'moc_*' rules.
    "moc_CLI.cpp",
    "moc_Analyst.cpp",
    "moc_FPStream.cpp",
    "moc_FPGrowth.cpp",
    "moc_JSONLogParser.cpp",
    "moc_Parser.cpp",
  ],
  known_warnings = [
    "shared/qxtcommandoptions.cpp",
  ],
  deps = [
    ":moc_CLI",
    ":moc_Analyst",
    ":moc_FPStream",
    ":moc_FPGrowth",
    ":moc_JSONLogParser",
    ":moc_Parser",
  ],
  external_deps = [
    ('qt', '>= 4.7', "QtCore")
  ],
  preprocessor_flags = [
    # Instruct main() to set up the CLI event loop.
    "-DINTERFACE_COMMANDLINE",
    # Qt defines.
    "-DQT_CORE_LIB",
    # Qt includes.
    "-I/data/users/wimleers/third-party/gcc-4.6.2-glibc-2.13/qt/qt-4.7.4/include/QtCore",
    # Subdirectories may be used for includes.
    "-Ipatternminer/shared",
  ],
  linker_flags = [
    "-ldl",
  ],
)

files_to_moc = [
    'CLI/CLI.h',
    'Analytics/Analyst.h',
    'Analytics/FPStream.h',
    'Analytics/FPGrowth.h',
    'Parser/JSONLogParser.h',
    'TailerSwiftParser/Parser.h',
]

for f in files_to_moc:
    p = os.path.split(f)[-1:]
    filename = os.path.basename(f)
    basename = os.path.splitext(filename)[0]
    custom_rule (
      name = "moc_%s" % basename,
      build_script = "fbconfig-moc-wrapper.py",
      build_args = "--file %s" % f,
      output_gen_files = ["moc_%s.cpp" % basename],
    )
